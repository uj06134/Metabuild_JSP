/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2025-09-16 08:47:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import myPkg.*;
import java.text.SimpleDateFormat;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("myPkg");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 싱글톤 패턴
	BoardDao bdao = BoardDao.getInstance();

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

	int pageSize = 10; // 1페이지당 10개
	
	String pageNum = request.getParameter("pageNum");
	if(pageNum == null){ // 현재화면에서 실행
		pageNum = "1";
	}
	int currentPage = Integer.parseInt(pageNum);
	int startRow = (currentPage - 1) * pageSize + 1;
	int endRow = (currentPage * pageSize);
	
	// 전체 레코드 개수
	int count = bdao.getArticleCount();
	ArrayList<BoardBean> list = bdao.getArticles(startRow, endRow);
	// 현재 페이지에 처음 시작되는 번호
	int number = count - (currentPage - 1) * pageSize;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("    table {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        margin: auto;\r\n");
      out.write("    }\r\n");
      out.write("    th {\r\n");
      out.write("    	background-color: skyblue;\r\n");
      out.write("    	border: 1px solid #232323;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    td {\r\n");
      out.write("        border: 1px solid #232323;\r\n");
      out.write("        padding: 5px;\r\n");
      out.write("    }\r\n");
      out.write("    a {\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: blue;\r\n");
      out.write("    }\r\n");
      out.write("    #page {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        margin-top: 15px;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("<b>글목록(전체 글: ");
      out.print(count );
      out.write(")</b>\r\n");
      out.write("<table width=\"700\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td>\r\n");
      out.write("			<a href=\"writeForm.jsp\">글쓰기</a>\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>\r\n");
      out.write("<table width=\"700\">\r\n");
      out.write("	<tr height=\"30\"> \r\n");
      out.write("      <th align=\"center\"  width=\"50\"  >번 호</th> \r\n");
      out.write("      <th align=\"center\"  width=\"250\" >제   목</th> \r\n");
      out.write("      <th align=\"center\"  width=\"100\" >작성자</th>\r\n");
      out.write("      <th align=\"center\"  width=\"150\" >작성일</th> \r\n");
      out.write("      <th align=\"center\"  width=\"50\" >조 회</th> \r\n");
      out.write("      <th align=\"center\"  width=\"100\" >IP</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 
    	for(int i=0; i<list.size(); i+=1){
    		BoardBean bb = list.get(i);
    
      out.write("		\r\n");
      out.write("	    	<tr>\r\n");
      out.write("	    		<td>");
      out.print(number-- );
      out.write("</td>\r\n");
      out.write("	    		<td>\r\n");
      out.write("	    		");
 
	    			if(bb.getRe_level()>0){
	    				int wid = bb.getRe_level()*20;
	    		
      out.write("\r\n");
      out.write("	    			<img src=\"./images/level.gif\" width=\"");
      out.print(wid );
      out.write("\" height=\"15\">\r\n");
      out.write("	    			<img src=\"./images/re.gif\" >\r\n");
      out.write("	    		");
    				
	    			}
	    		
      out.write("\r\n");
      out.write("	    			<a href=\"content.jsp?num=");
      out.print(bb.getNum() );
      out.write("&pageNum=");
      out.print(pageNum);
      out.write('"');
      out.write('>');
      out.print(bb.getSubject() );
      out.write("</a>\r\n");
      out.write("	    			");

	    				if(bb.getReadcount()>=10){
	    			
      out.write("\r\n");
      out.write("	    					<img src=\"./images/hot.gif\" height=\"15\">\r\n");
      out.write("	    			");

	    				}
	    			
      out.write("\r\n");
      out.write("	    		</td>\r\n");
      out.write("	    		<td>");
      out.print(bb.getWriter() );
      out.write("</td>\r\n");
      out.write("	    		<td>");
      out.print(sdf.format(bb.getReg_date()) );
      out.write("</td>\r\n");
      out.write("	    		<td>");
      out.print(bb.getReadcount() );
      out.write("</td>\r\n");
      out.write("	    		<td>");
      out.print(bb.getIp() );
      out.write("</td>\r\n");
      out.write("	    	</tr>\r\n");
      out.write("    ");
 
    	}
    
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<div id=\"page\">\r\n");

	if(count > 0){
		int pageCount = count / pageSize + (count % pageSize==0 ? 0 : 1);
		/* 267/10 +1= 26+1 */
		int pageBlock = 10;
		int startPage = ((currentPage-1) / pageBlock * pageBlock) + 1;
		int endPage = startPage + pageBlock - 1;
		
		if(endPage > pageCount){
			endPage = pageCount;
		}
		
		if(startPage>10){

      out.write("\r\n");
      out.write("			<a href=\"list.jsp?pageNum=");
      out.print(startPage-10);
      out.write("\">[이전]</a>	\r\n");
			
		}
		for(int i=startPage; i<=endPage; i++){

      out.write("			\r\n");
      out.write("			<a href=\"list.jsp?pageNum=");
      out.print(i);
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>		\r\n");
			
		}
		if(endPage < pageCount){

      out.write("\r\n");
      out.write("			<a href=\"list.jsp?pageNum=");
      out.print(startPage+10);
      out.write("\">[다음]</a>\r\n");
			
		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
