/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2025-09-12 08:47:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import myPkg.*;

public final class select_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("myPkg");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("   \r\n");
      out.write("<!-- MovieDao 객체 생성 -->\r\n");
      myPkg.MovieDao bdao = null;
      bdao = (myPkg.MovieDao) _jspx_page_context.getAttribute("bdao", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bdao == null){
        bdao = new myPkg.MovieDao();
        _jspx_page_context.setAttribute("bdao", bdao, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- getAllMovie 메서드 호출 -->\r\n");

	ArrayList<MovieBean> list = bdao.getAllMovie();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("    table {\r\n");
      out.write("        width: 1000px;\r\n");
      out.write("        margin: auto;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    table th {\r\n");
      out.write("        background-color: Yellow;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("	function allDelete(obj){\r\n");
      out.write("		rowcheck = document.getElementsByName(\"rowcheck\");\r\n");
      out.write("		if(obj.checked){\r\n");
      out.write("			for(i=0;i<rowcheck.length;i+=1){\r\n");
      out.write("				rowcheck[i].checked = true;\r\n");
      out.write("			}\r\n");
      out.write("		}else{\r\n");
      out.write("			for(i=0;i<rowcheck.length;i+=1){\r\n");
      out.write("				rowcheck[i].checked = false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}// allDelete\r\n");
      out.write("	\r\n");
      out.write("	function selectDelete(){\r\n");
      out.write("		rowObj = document.getElementsByName(\"rowcheck\");\r\n");
      out.write("        for(i=0; i<rowObj.length;i++){\r\n");
      out.write("            if(rowObj[i].checked){\r\n");
      out.write("                document.myform.submit();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        alert(\"check 하나라도 선택하세요.\");\r\n");
      out.write("	}// selectDelete\n");
      out.write("</script>\r\n");
      out.write("<form name=\"myform\" action = \"multiDelete.jsp\" method=\"post\">\r\n");
      out.write("<input type=\"button\" value=\"추가\" onClick=\"location.href='insertForm.jsp'\">\r\n");
      out.write("<input type=\"button\" value=\"삭제\" onClick=\"selectDelete()\">\r\n");
      out.write("<table border =\"1\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th><input type=\"checkbox\" name=\"allcheck\" onClick=\"allDelete(this)\"></th>\r\n");
      out.write("		<th>번호</th>\r\n");
      out.write("		<th>아이디</th>\r\n");
      out.write("		<th>이름</th>\r\n");
      out.write("		<th>나이</th>\r\n");
      out.write("		<th>좋아하는 장르</th>\r\n");
      out.write("		<th>즐겨보는 시간대</th>\r\n");
      out.write("		<th>동반관객수</th>\r\n");
      out.write("		<th>개선사항</th>\r\n");
      out.write("		<th>수정</th>\r\n");
      out.write("		<th>삭제</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("		");
for(MovieBean mb : list){
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td><input type=\"checkbox\" name=\"rowcheck\" value=\"");
      out.print( mb.getNum() );
      out.write("\"></td>\r\n");
      out.write("			<td>");
      out.print( mb.getNum());
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getId() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getName() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getAge() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getGenre() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getTime() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getPartner() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( mb.getMemo());
      out.write("</td>\r\n");
      out.write("			<td><a href = \"updateForm.jsp?num=");
      out.print( mb.getNum() );
      out.write("\">수정</a></td>\r\n");
      out.write("			<td><a href = \"deleteProc.jsp?num=");
      out.print( mb.getNum() );
      out.write("\">삭제</a></td>\r\n");
      out.write("			\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
} 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("</form>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
